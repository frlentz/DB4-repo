import matplotlib.pyplot as plt
import io

# Your data, copied directly from the previous output.
# Each line represents a (timestamp, temperature) pair, separated by a tab.
data_string = """
13	18.65109
19	18.33466
25	18.10449
31	18.21957
37	18.56479
43	18.44971
49	18.21957
55	17.87433
61	18.21957
67	18.33466
73	18.21957
79	18.21957
85	18.56479
91	46.09619
97	47.08176
103	45.13181
109	44.0704
115	43.03235
121	42.57806
127	42.05331
133	41.57089
139	41.01996
145	40.69217
151	40.29434
157	40.15039
163	39.72095
169	39.57858
175	39.1889
181	38.87216
187	38.66199
193	38.55719
199	38.17462
205	34.54352
211	32.67401
217	37.21213
223	37.31451
229	37.10992
235	36.9061
241	36.53415
247	36.29861
253	36.0975
259	35.86362
265	35.49789
271	35.3985
277	35.10129
283	34.90387
289	35.10129
295	34.54352
301	34.54352
307	34.31519
313	34.12009
320	33.89319
326	33.76385
332	33.44162
338	33.44162
344	33.34518
350	32.99286
356	32.86514
362	32.67401
368	32.48337
374	32.35657
380	32.22992
386	31.97736
392	31.97736
398	31.85135
404	31.63135
410	31.34937
416	31.1994
422	31.12454
428	31.04974
434	30.97498
440	30.78842
446	30.69528
452	30.35468
458	31.04974
464	30.0462
470	29.95389
476	29.86163
482	29.7388
488	29.49362
494	29.7388
500	29.40189
506	29.12708
512	28.88348
518	28.76196
524	28.6709
530	28.76196
536	28.48898
542	28.48898
548	28.15637
554	28.39816
560	28.15637
566	27.94525
572	27.85492
578	27.67444
584	27.49429
590	27.49429
596	27.31439
602	27.19464
608	27.19464
614	26.95554
620	26.866
626	26.68707
632	26.59772
638	26.59772
644	26.16977
650	26.0986
656	26.02747
663	26.02747
669	25.88525
675	25.95636
681	25.76691
687	25.41245
693	25.41245
699	25.53049
705	25.29449
711	25.29449
717	25.05887
723	25.09808
729	25.01959
735	24.98041
741	25.01959
747	24.86279
753	24.82358
759	24.73547
765	24.6474
771	24.55939
777	24.47141
783	24.35416
789	24.55939
795	24.12
801	24.03223
807	23.94452
813	23.94452
819	24.12
825	23.76926
831	23.85684
837	23.41919
843	23.41919
849	23.5358
855	23.24442
861	23.41919
867	23.06979
873	23.06979
879	22.72098
885	22.63385
891	22.63385
897	22.63385
903	22.54675
909	22.54675
915	22.45972
921	22.63385
927	22.37271
933	22.37271
939	22.0249
945	22.0249
951	21.93805
957	21.93805
963	21.67758
969	21.56189
975	21.56189
981	21.44626
987	21.56189
993	21.33066
999	21.24399
1006	21.33066
1012	21.15735
1018	20.9841
1024	20.9841
1030	21.07071
1036	20.63788
1042	20.63788
1048	20.63788
1054	20.7244
1060	20.7244
1066	20.52255
1072	20.63788
1078	20.29193
1084	20.11905
1090	20.29193
1096	20.11905
1102	20.11905
1108	19.9462
1114	19.60065
1120	19.60065
1126	19.53159
1132	19.60065
1138	19.53159
1144	19.46249
1150	19.60065
1156	19.71582
1162	19.46249
1168	19.60065
1174	19.46249
1180	19.46249
1186	19.53159
1192	19.83099
1198	19.25528
1204	19.32434
1210	19.25528
1216	19.46249
1222	19.71582
1228	18.91
1234	18.8237
1240	19.46249
1246	19.53159
1252	18.8237
1258	20.11905
1264	18.33466
"""

# Initialize lists to store timestamps and temperatures
timestamps = []
temperatures = []

# Use io.StringIO to treat the string as a file
# This allows us to easily iterate line by line
data_file = io.StringIO(data_string)

for line in data_file:
    line = line.strip() # Remove leading/trailing whitespace, including newline characters
    if line: # Ensure the line is not empty
        parts = line.split('\t') # Split by tab character
        if len(parts) == 2: # Ensure we have both timestamp and temperature
            try:
                timestamp = int(parts[0])
                temperature = float(parts[1])
                timestamps.append(timestamp)
                temperatures.append(temperature)
            except ValueError as e:
                print(f"Skipping line due to data conversion error: {line} - {e}")
        else:
            print(f"Skipping malformed line: {line}")

# Create the plot
plt.figure(figsize=(12, 6)) # Adjust figure size for better readability
plt.plot(timestamps, temperatures, marker='o', linestyle='-', color='b', markersize=3)

# Add labels and title
plt.xlabel("Timestamp (seconds)")
plt.ylabel("Temperature (Â°C)")
plt.title("Temperature Over Time")
plt.grid(True) # Add a grid for easier reading of values
plt.tight_layout() # Adjust layout to prevent labels from overlapping
plt.show() # Display the plot